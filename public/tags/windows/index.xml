<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on Camel Shang</title>
    <link>/tags/windows/</link>
    <description>Recent content in Windows on Camel Shang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2017 Camel Shang</copyright>
    <lastBuildDate>Tue, 12 Dec 2017 13:20:40 +0800</lastBuildDate>
    
	<atom:link href="/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>磨刀不误砍柴工</title>
      <link>/projects/tool/</link>
      <pubDate>Tue, 12 Dec 2017 13:20:40 +0800</pubDate>
      
      <guid>/projects/tool/</guid>
      <description> Windows  Wox babun Everything Listary Calibre PicPick CClearner CPUZ Potplayer IrFanView Sublime Text VSCode  Linux  oh-my-zsh VSCode  </description>
    </item>
    
    <item>
      <title>windows安装caffe并编译fast-rcnn-demo</title>
      <link>/blog/windows%E5%AE%89%E8%A3%85caffe%E5%B9%B6%E7%BC%96%E8%AF%91fast-rcnn-demo/</link>
      <pubDate>Thu, 01 Sep 2016 20:56:28 +0000</pubDate>
      
      <guid>/blog/windows%E5%AE%89%E8%A3%85caffe%E5%B9%B6%E7%BC%96%E8%AF%91fast-rcnn-demo/</guid>
      <description>microsoft caffe 首先在微软github主页下载microsoft-caffe，官方的编译运行文档写得比较详细，按照步骤来利用VS编译一般没什么问题。一般常见的问题是error C2220: 警告被视为错误，只需右键项目，属性，C/C++，Treat Warnings as Error设置为No即可。附上个人的CommonSettings.props，仅供参考。
所有项目编译成功之后，将caffe_root\Build\x64\Release\pycaffe设置环境变量PythonPath。设置之后打开Python，若import caffe成功则表示编译成功。
caffe mnist 示例 Windows下很多人用cygwin来模拟一些Linux操作，个人推荐使用Babun，一款优雅好用的Windows shell工具。
按照caffe官网mnist文档一步一步即可。
下载数据集  进入babun cd到caffe_root 输入./data/mnist/get_mnist.sh  转化数据集为lmdb  修改./examples/mnist/create_mnist.sh, 第8行BUILD=build/examples/mnist &amp;ndash;&amp;gt; BUILD=Build/x64/Release, 第17行和第19行convert_mnist_data.bin &amp;ndash;&amp;gt; convert_mnist_data 同样在Babun下，输入./examples/mnist/create_mnist.sh  训练Lenet  修改./examples/mnist/train_lenet.sh, 第4行./build/tools/caffe train &amp;ndash;solver=examples/mnist/lenet_solver.prototxt $@ &amp;ndash;&amp;gt;
 BUILD=Build/x64/Release $BUILD/caffe train --solver=examples/mnist/lenet_solver.prototxt $@  在babun下，输入./examples/mnist/train_lenet.sh，得到如下图结果，示例mnist成功跑通
  fast rcnn demo示例 上面这些步骤完成后，如果直接进入fastrcnn-root,运行python ./tools/demo.py（注意：此时在cmd中运行即可，目前babun自带Python，但是好像不能调用系统自带的python）会提示不存在ROIPooling，导致demo运行失败。进入caffe项目发现，roi_pooling_layer.cpp 以及 roi_pooling_layer.cu根本就没有编译。因此将 roi_pooling_layer.cpp 添加进 libcaffe-src 中，将 roi_pooling_layer.cu 添加进 libcaffe-cu 中，再重新编译即可。
再次运行python ./tools/demo.py得到结果如下
后续 后续就是在fast rcnn上训练自己的数据了，Linux上已经跑通，Windows上有待测试。</description>
    </item>
    
  </channel>
</rss>